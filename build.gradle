plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java-library'
    id 'maven-publish'
    id 'com.palantir.git-version' version '1.0.0'
}

group = 'icu.clemon'
version = gitVersion()

def repos = [
        aliyunMavenPublic: [
                url: "https://maven.aliyun.com/repository/public"
        ],
        aliyunMavenRelease: [
                url: "https://packages.aliyun.com/maven/repository/xxxx-release-xxxx/",
                username: "xxxxxx",
                password: "xxxxxx"
        ],
        aliyunMavenSnapshot: [
                url: "https://packages.aliyun.com/maven/repository/xxxx-snapshot-xxxx/",
                username: "xxxxxxxx",
                password: "xxxxxxxx"
        ]
]

def lombok = "org.projectlombok:lombok"

repositories {
    mavenLocal()
    maven {
        url repos.aliyunMavenPublic.url
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly lombok
    annotationProcessor lombok
    testCompileOnly lombok
    testAnnotationProcessor lombok

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

java {
//    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        Production(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            from components.java
        }
    }
    repositories {
        maven {
            name = "aliyunPrivateNexus"
            url = version.endsWith('SNAPSHOT') ? repos.aliyunMavenSnapshot.url : repos.aliyunMavenRelease.url
            credentials {
                username version.endsWith('SNAPSHOT') ? repos.aliyunMavenSnapshot.username : repos.aliyunMavenRelease.username
                password version.endsWith('SNAPSHOT') ? repos.aliyunMavenSnapshot.password : repos.aliyunMavenRelease.password
            }
        }
    }
}